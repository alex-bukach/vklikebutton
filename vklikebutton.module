<?php

// $Id$

/**
 * @file
 * Adds VKontakte's "Like" button to each selected node type.
 * Adds a block with a global static value where users can "Like" the URL set by
 * admins.
 */

/**
 * Implements of hook_menu().
 */
function vklikebutton_menu() {
  $items['admin/config/vklikebutton'] = array(
      'title' => 'VK Like Button',
      'description' => 'Configure the VKontakte Like button',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vklikebutton_common_settings'),
      'access arguments' => array('administer vklikebutton'),
      'position' => 'right',
      'weight' => -20,
      'type' => MENU_NORMAL_ITEM,
      'file' => 'vklikebutton.admin.inc',
  );
  $items['admin/config/vklikebutton/appid'] = array(
      'title' => 'App ID',
      'description' => 'Enter the VKontakte app ID',
      'page callback' => 'drupal_get_form',
      'access arguments' => array('administer vklikebutton'),
      'page arguments' => array('vklikebutton_common_settings'),
      'position' => 'right',
      'weight' => -20,
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'file' => 'vklikebutton.admin.inc',
  );
  $items['admin/config/vklikebutton/dynamic'] = array(
      'title' => 'Dynamic Like button',
      'description' => 'Configure the settings for the Like button as it appears on individual nodes (liking that node).',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vklikebutton_dynamic_settings'),
      'access arguments' => array('administer vklikebutton'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'vklikebutton.admin.inc',
      'weight' => 0,
  );
  $items['admin/config/vklikebutton/static'] = array(
      'title' => 'Static Like button',
      'description' => 'Configure the settings for the static Like button as it appears in the block (liking a given url). Use this to like for example your VKontakte fanpage.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vklikebutton_static_settings'),
      'access arguments' => array('administer vklikebutton block'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'vklikebutton.admin.inc',
      'weight' => 1,
  );
  return $items;
}

/**
 * Implements of hook_node_view().
 */
function vklikebutton_node_view($node, $view_mode) {
  global $user, $base_url;
  $types = variable_get('vklikebutton_node_types', array());
  $fullnodedisplay = variable_get('vklikebutton_full_node_display', 0);
  $teaserdisplay = variable_get('vklikebutton_teaser_display', 0);
  $full = ($view_mode == 'full') ? TRUE : FALSE;
  $show = (!empty($types[$node->type]) && user_access('access vklikebutton'));
  // Thanks to corbacho for supplying the code for the $webpage_to_like variable...
  // (It was apparently throwing errors/notices the way I had it set up.)
  $webpage_to_like = url("node/$node->nid", array('absolute' => TRUE));
  $likebutton_weight = variable_get('vklikebutton_weight', '0');
  $item = field_get_items('node', $node, 'body');
  if ($item) {
    if ($item[0]['summary']) {
      $description = check_plain(strip_tags($item[0]['summary']));
    } else {
      $description = vklikebutton_trim_text(array(
          'max_length' => 140,
          'word_boundary' => TRUE,
          'ellipsis' => TRUE,
          'html' => TRUE,
              ), check_plain(strip_tags($item[0]['safe_value']))); //trim body
    }
  } else {
    $description = '';
  }
  $conf = array(
      'appid' => variable_get('vklikebutton_appid', ''),
      'type' => variable_get('vklikebutton_type', 'full'),
      'verb' => variable_get('vklikebutton_verb', '0'),
      'height' => variable_get('vklikebutton_height', '22'),
      'width' => variable_get('vklikebutton_width', '350'),
      'title' => $node->title,
      'description' => $description,
      'text' => $node->title,
      'url' => $webpage_to_like,
      'image' => '',
      'page_id' => $node->nid,
  );
  if ($show) {

    // Content area
    if (($view_mode == 'teaser' && $teaserdisplay == 1) || ($view_mode == 'full' && $fullnodedisplay == 0)) {
      $node->content['vklikebutton_field'] = array(
          '#markup' => _vklikebutton_field($webpage_to_like, $conf),
          '#weight' => $likebutton_weight,
      );
    }
    // Link area
    if (($view_mode == 'teaser' && $teaserdisplay == 2) || ($view_mode == 'full' && $fullnodedisplay == 2)) {
      $node->content['links']['#links']['vklikebutton_field'] = array(
          'title' => _vklikebutton_field($webpage_to_like, $conf),
          'html' => TRUE,
      );
    }
  }
}

/**
 * Implements of hook_permission().
 */
function vklikebutton_permission() {
  return array(
      'administer vklikebutton' => array(
          'title' => t('Administer VK Like button'),
          'description' => t('Perform administration tasks for VK Like button')
      ),
      'administer vklikebutton block' => array(
          'title' => t('Administer VK Like button block'),
          'description' => t('Perform administration tasks for VK Like button block')
      ),
      'access vklikebutton' => array(
          'title' => t('Access VK Like button'),
      ),
  );
}

/**
 * Implementation of hook_block_info()
 */
function vklikebutton_block_info() {
  $fullnodedisplay = variable_get('vklikebutton_full_node_display', 0);
  $blocks['vklikebutton_static_block'] = array(
      'info' => t('Static VK Like button'),
      'cache' => DRUPAL_NO_CACHE,
  );
  if ($fullnodedisplay == 1) {
    $blocks['vklikebutton_dynamic_block'] = array(
        'info' => t('Dynamic VK Like button'),
        'cache' => DRUPAL_NO_CACHE,
    );
  }
  return $blocks;
}

/**
 * Implementation of hook_block_configure()
 */
function vklikebutton_block_configure($delta = '') {
  global $base_url;
  $form = array();
  if ($delta == 'vklikebutton_static_block') {
    $form['vklikebutton_static_block'] = array(
        '#type' => 'fieldset',
        '#title' => t('Static VK Like button block'),
        '#collapsible' => FALSE,
    );
    $form['vklikebutton_static_block']['vklikebutton_static_config'] = array(
        '#markup' => '<p>' . t('To configure the URL and the appearance of the button go to the ' . l(t('static Like button settings'), 'admin/config/vklikebutton/static') . '. Make sure you set the right permissions on the ' . l(t('permissions page'), 'admin/people/permissions') . '.</p>'),
    );
  }
  if ($delta == 'vklikebutton_dynamic_block') {
    $form['vklikebutton_dynamic_block'] = array(
        '#type' => 'fieldset',
        '#title' => t('Dynamic VK Like button block'),
        '#collapsible' => FALSE,
    );
    $form['vklikebutton_dynamic_block']['vklikebutton_dynamic_config'] = array(
        '#markup' => '<p>' . t('To configure the visibility and the appearance of the button go to the ' . l(t('dynamic Like button settings'), 'admin/config/vklikebutton/dynamic') . '. You can enhance the visibility settings by using the settings on this page. Make sure you set the right permissions on the ' . l(t('permissions page'), 'admin/people/permissions') . '.</p>'),
    );
  }
  return $form;
}

/**
 * Implementation of hook_block_view()
 */
function vklikebutton_block_view($delta = '') {
  global $base_url;
  $node = node_load(arg(1));
  $types = variable_get('vklikebutton_node_types', array());
  if ($node) {
    $show = (!empty($types[$node->type]) && user_access('access vklikebutton'));
  } else {
    $show = NULL;
  }
  $fullnodedisplay = variable_get('vklikebutton_full_node_display', 0);
  $block = array();
  switch ($delta) {
    case 'vklikebutton_dynamic_block':
      if ($show && $fullnodedisplay == 1) {
        $webpage_to_like = url("node/$node->nid", array('absolute' => TRUE));
        $item = field_get_items('node', $node, 'body');
        if ($item) {
          if ($item[0]['summary']) {
            $description = check_plain(strip_tags($item[0]['summary']));
          } else {
            $description = vklikebutton_trim_text(array(
                'max_length' => 255,
                'word_boundary' => TRUE,
                'ellipsis' => TRUE,
                'html' => TRUE,
                    ), check_plain(strip_tags($item[0]['safe_value']))); //trim body
          }
        } else {
          $description = '';
        }
        $conf = array(
            'appid' => variable_get('vklikebutton_appid', ''),
            'type' => variable_get('vklikebutton_type', 'full'),
            'verb' => variable_get('vklikebutton_verb', '0'),
            'height' => variable_get('vklikebutton_height', '22'),
            'width' => variable_get('vklikebutton_width', '350'),
            'title' => $node->title,
            'description' => $description,
            'text' => $node->title,
            'url' => $webpage_to_like,
            'image' => '',
            'page_id' => $node->nid,
        );
        $block['content'] = _vklikebutton_field($webpage_to_like, $conf);
      }
      break;
    case 'vklikebutton_static_block':
      global $base_url;
      $addr = variable_get('vklikebutton_block_url', $base_url);
      $conf = array(
          'appid' => variable_get('vklikebutton_appid', ''),
          'type' => variable_get('vklikebutton_bl_type', 'full'),
          'verb' => variable_get('vklikebutton_bl_verb', '0'),
          'height' => variable_get('vklikebutton_bl_height', '22'),
          'width' => variable_get('vklikebutton_bl_width', '350'),
          'title' => variable_get('vklikebutton_page_title', variable_get('site_name', '')),
          'description' => variable_get('vklikebutton_page_description', variable_get('site_slogan', '')),
          'text' => variable_get('vklikebutton_page_text', variable_get('site_name', '')),
          'url' => variable_get('vklikebutton_page_url', $base_url),
          'image' => variable_get('vklikebutton_page_image', ''),
          'page_id' => '0',
      );
      $block['content'] = _vklikebutton_field($addr, $conf);
      break;
  }
  return $block;
}

function _vklikebutton_field($webpage_to_like, $conf) {
  $webpage_to_like = urlencode($webpage_to_like);
  $width = $conf['width'];
  $height = $conf['height'];
  $type = $conf['type'];
  $verb = $conf['verb'];
  $appid = $conf['appid'];
  $title = $conf['title'];
  $description = $conf['description'];
  $text = $conf['text'];
  $url = $conf['url'];
  $image = $conf['image'];
  $page_id = $conf['page_id'];
  
  $element_id = 'vk_like_' . $page_id;

  $options = array();
  if ($width) $options[] = 'width: ' . json_encode($width);
  if ($height) $options[] = 'height: ' . json_encode($height);
  if ($type) $options[] = 'type: ' . json_encode($type);
  if (!is_null($verb)) $options[] = 'verb: ' . json_encode($verb);
  if ($title) $options[] = 'pageTitle: ' . json_encode($title);
  if ($description) $options[] = 'pageDescription: ' . json_encode($description);
  if ($url) $options[] = 'pageUrl: ' . json_encode($url);
  if ($image) $options[] = 'pageImage: ' . json_encode($image);
  if ($text) $options[] = 'text: ' . json_encode($text);

  $output = '<div id="' . $element_id . '"></div>';
  drupal_add_js('http://vk.com/js/api/openapi.js?62', array(
      'type' => 'external',
      'weight' => '-20',
      'group' => JS_LIBRARY,
  ), 'vklikebutton_openapi');
  drupal_add_js('VK.init({apiId: ' . $appid . ', onlyWidgets: true});', array(
      'type' => 'inline',
      'scope' => 'header',
      'weight' => '0',
      'group' => JS_LIBRARY,
  ), 'vklikebutton_init');
  drupal_add_js('VK.Widgets.Like(' . json_encode($element_id) . ', {' . implode(', ', $options) . '}, ' . $page_id . ');', array(
      'type' => 'inline',
      'scope' => 'footer',
  ));
  return $output;
}

/**
 * Trim the text down to the specified length.
 */
function vklikebutton_trim_text($alter, $value) {
  if (drupal_strlen($value) > $alter['max_length']) {
    $value = drupal_substr($value, 0, $alter['max_length']);
    // TODO: replace this with cleanstring of ctools
    if (!empty($alter['word_boundary'])) {
      $regex = "(.*)\b.+";
      if (function_exists('mb_ereg')) {
        mb_regex_encoding('UTF-8');
        $found = mb_ereg($regex, $value, $matches);
      }
      else {
        $found = preg_match("/$regex/us", $value, $matches);
      }
      if ($found) {
        $value = $matches[1];
      }
    }
    // Remove scraps of HTML entities from the end of a strings
    $value = rtrim(preg_replace('/(?:<(?!.+>)|&(?!.+;)).*$/us', '', $value));

    if (!empty($alter['ellipsis'])) {
      $value .= t('...');
    }
  }
  if (!empty($alter['html'])) {
    $value = _filter_htmlcorrector($value);
  }

  return $value;
}